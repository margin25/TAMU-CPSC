// Mualla Argin 728003004

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // bitwise not the x input?
        zy, // zero the y input?
        ny, // bitwise not the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // bitwise not the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // zero out x input
    Mux16(a = x,b[0..15] = false, sel = zx , out=initialX);

    // zero out y input 
    Mux16(a=y, b[0..15]=false, sel=zy, out=initialY);

    // Not x
    Not16(in=initialX, out=notx);

    // Not y 
    Not16(in=initialY, out=noty);

    // Make choices for x input
    Mux16(a=initialX, b=notx, sel=nx, out=xchoice);

    // Make choices for y input
    Mux16(a=initialY, b=noty, sel=ny, out=ychoice);

    // x + y 
    Add16(a=xchoice, b= ychoice, out=xyadd);

    // x & y
    And16(a=xchoice, b=ychoice, out=xyand);

    // mux acts as if : determining whether we need x+y or x&y
    Mux16(a=xyand, b= xyadd, sel=f, out=computedxy);

    // bitwise not output
    Not16(in=computedxy, out=notcompxy);

    // no input
    Mux16(a=computedxy, b=notcompxy, sel=no, out=out, out[0..7]=zr0, out[8..15]=zr1 , out[15]=msb);
    
    // zr output
    Or8Way(in=zr0, out=zero0);
    Or8Way(in=zr1, out=zero1);
    Or(a=zero0, b=zero1, out=final);
    Not(in=final, out=zr);

    // ng output 
    Mux(a=false, b=true, sel=msb, out=ng);


                
}