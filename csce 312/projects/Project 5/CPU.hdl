// Mualla Argin 728003004

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    DMux(in = true, sel = instruction[15] , a = ainst, b = cinst); // determines if a instruction OR c instruction
    And16(a = instruction, b = true, out[0] = cj3, out[1] = cj2, out[2] = cj1, out[3] = cd3, out[4] = cd2, out[5] = cd1, out[6] = cc6, out[7] = cc5, out[8] = cc4, out[9] = cc3, out[10] = cc2, out[11] = cc1, out[12] = ca, out[0..14] = a);
    // name pins^

    // A Register 
    Mux16(sel = ainst, a = oalu, b = instruction , out = ina );
    Or(a = cd1, b = ainst, out = loada );
    ARegister(in = ina, load = loada, out = aresult , out[0..14] = addressM);

    // D Register 
    And(a = cd2, b = cinst, out = dload);
    DRegister(in = oalu, load = dload, out = dresult);

    // ALU
    Mux16(sel = ca, a = aresult, b = inM, out= mora);
    ALU(x = dresult , y = mora, zx = cc1, nx = cc2, zy = cc3, ny = cc4, f = cc5, no = cc6, out = oalu, out = outM, zr = zr, ng = ng);
    And(a = cd3, b = cinst, out = writeM);

    // jump //
    // Determines if + or - or 0
    Or(a = zr , b = ng , out = zrandng);
    Not(in = zrandng, out = ps);
    And(a = cj1, b = ng, out = jlt);
    And(a = cj2, b = zr, out = jeq);
    And(a = cj3, b = ps, out = jgt);

    // determines if jump will occur
    Or(a = jlt, b = jeq, out = jmp1);
    Or(a = jmp1, b = jgt, out = jmp2);
    And(a = jmp2, b = cinst, out = jmp);

    // program counter 
    Not(in = jmp, out = increase);
    PC(in = aresult, load = jmp, inc = increase, reset = reset , out[0..14] = pc);    
}